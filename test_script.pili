test =
	0: 'test init success'
print test[0]

greet = "hello world"
test[1] = greet == 'hello world'
print 'test 1 passed' if test[1] == true else 'test 1 failed'

greeting[str src]: 'Hello ' + src
test[2] = "Hello Veronica" == greeting['Veronica']
print 'test 2 passed' if test[2] == True else 'test 2 failed'

my_var[int num]:
	prop1 = "hello"
	prop2 = "world"
	return num + 5

my_var[str text]: text + '!'
test[3] = my_var[1] == 10
print 'test 3 passed' if test[3] else 'test 3 failed'

test[4] = my_var[2] == 11
print 'test 4 passed' if test[4] else 'test 4 failed'

next_var =
	str text: text + '?!?!'
test[5] = next_var['hahahahaha'] == 'hahahahaha?!?!'
print 'test 5 passed' if test[5] else 'test 5 failed'

my_var[3] = "three"
test[6d] = my_var[3] == 'three'
print 'test 10 passed' if test[6d] else 'test 10 failed'

test[7d] = not 345 ~ type["345"] and 345 ~ type[3333]
print 'test 11 passed' if test[7d] else 'test 11 failed'

Dog[str name, str breed]:
	.bark: "hello my name is " + name
spot = Dog['Spot', 'terrier']
test[8d] = spot.bark == "hello my name is Spot"
print 'test 12 passed' if test[8d] else 'test 12 failed'

test[9d] = (spot.breed == "terrier" or spot.name == "Spot") and (spot.breed != "terrier" or spot.name == "Spot") and not (spot.breed == "terrier" and spot.name != "Spot") and not (spot.breed != "terrier" and spot.name == "Spot")
print 'test 13 passed' if test[9d] else 'test 13 failed'

spot.name = 'Rover'
test[14] = spot.name == 'Rover'
print 'test 14 passed' if test[14] else 'test 14 failed'

test[15] = spot.bark == "hello my name is Rover"
print 'test 15 passed' if test[15] else 'test 15 failed'

Range[int start, int end, int step]:
	index = start
	.next:
		return 'done' if index >= end else (index = index + step)
r = Range[0, 3, 1]
# print r.index
# print r.next
# print r.next
test[20] = r.index == 0 and r.next == 1 and r.next == 2 and r.next == 3 and r.next == 'done'
print 'test 20 passed' if test[20] else 'test 20 failed'

# test prototype modification
Dog.bark_breed: "Hi, I'm a " + breed
test[21] = (spot.bark_breed) == "Hi, I'm a terrier"
print 'test 21 passed' if test[21] else 'test 21 failed'

test[22] = Dog has "asdfknasdf" == false and Dog has "bark_breed" == true
test[22] = test[22] and not root has 'asdfasdf' and root has "Dog" == true
test[22] = test[22] and pili has 'string'
print 'test 22 passed' if test[22] else 'test 22 failed'

test[23] = (Dog[23] ?? "fall back") == "fall back" and (spot.name ?? "no name") == 'Rover'
print 'test 23 passed' if test[23] else 'test 23 failed'

foo[str|int]: 'it worked'
test[24] = foo[4] + foo["4"] == 'it worked' * 2
print 'test 24 ' + ('passed' if test[24] else 'failed')

foo2[str|int|bool var_name]: string[var_name] + ' worked'
test[25] = foo2[1] == "1 worked"
print 'test 25 ' + ('passed' if test[25] else 'failed')

Cat =
	str name:
		name = "ğŸ˜¸ " + name
	.meow: "hello my name is " + name
	.string: "Cat " + name

my_cat = Cat["Ruby"]
test[30] = string[my_cat] == my_cat.string and my_cat.string == "Cat ğŸ˜¸ Ruby"
print 'test 30 ' + ('passed' if test[30] else 'failed')

number = int|float|bool|ratio
add[number a, number b]: integer[a] + b
fav_num = 5
test[31] = add[fav_num, 5]  == fav_num.add[5]
print 'test 31 ' + ('passed' if test[31] else 'failed')


test[32] = type[-10 / 20].string == "ratio" \
	and type[4 * (1 + (-15 / 4))].string == "int" \
		and type[1.0 / 1 + 1].string == "float"
print 'test 32 ' + ('passed' if test[32] else 'failed')

int_patt = int[-3, 5]
test[33] = 1 ~ int_patt and -11 !~ int_patt and 0.0 !~ int_patt
small_str = str[1, 3]
word_str = str[`\w+`]
test[33] = test[33] and 'hi' ~ small_str and '' !~ small_str and 'too long' !~ small_str
test[33] = test[33] and 'hi' ~ word_str and 'two words' !~ word_str
print 'test 33 ' + ('passed' if test[33] else 'failed')

neg_int = int < 0
long_str = str >= 5
test[34] = -1 ~ neg_int and 1 !~ neg_int
test[34] = test[34] and 'hi' !~ long_str # and 'hello there' ~ long_str
print 'test 34 ' + ('passed' if test[34] else 'failed')

test[35] = 0
if 1 == 2
	test[35] = 1
else if 1 == 1
	test[35] = test[35] + 10
else
	test[35] = test[35] + 100

print 'test 35 ' + ('passed' if test[35] == 10 else 'failed')


my_list = []
my_list[1] = 'one'
my_list[2] = 'two'
my_list['not a number'] = 7d
my_list[3] = 'three'
test[40] = len[my_list] == 3
my_list.push['another value']
test[40] = test[40] and len[my_list] == 4 # and my_list[-1] == 'another value'
print 'test 40 ' + ('passed' if test[40] else 'failed')

test[41] = my_list.push[55].len == 5 and my_list[1] == 'one' and my_list[-5] == 'one'
print 'test 41 ' + ('passed' if test[41] else 'failed')


my_func = {any arg: print arg}
my_func["ANY ARG"]


exit
# ***********************

# for item in my_list
# 	print item

my_func = {}





# container =
# 	data = {}
# 	name = "I'm a container"
# 	.len: len[data]
# len[container]  # or container.len
# > 0
#
# Duration[int hr, int min]:
# 	is_afternoon: hr >= 12
# 	is_morning: hr < 12
# 	.["+"][other]:
# 		new_hr = hr + other.hr
# 		new_min = min + other.min
# 		if new_min >= 60
# 			new_min -= 60
# 			new_hr += 1
# 		return Duration[new_hr % 24, new_min]
# dur = Duration[1, 59] + Duration[0, 15]
# print str[dur.hr] + ":" str[dur.min]
# # > "2:14"
#
#
#
#
#
#
#
#
#
# coolFunc[str input: "345", int n: 43]:
#     0: "zero"
#     "string_key": 5
#     string_key: 5   // equivalent to above
#     int: 3 + 3      // key is not string "int", rather the type `int`
#     int<0: "negative integers"
#     return input + str[n]
#
# myFunction[0]: "zero"
# myFunction["string_key"]: 5
# myFunction["string_key"]: 5
# myFunction[int]: 3 + 3
# myFunction[int<0]: "negative integers"
#
# coolFunc["input"]
#
# Token =
# 	str[`\s*`]: "SPACE"
# 	str src: "other string"
# 	str src, int n: src + " " + str[n]
#
# print Token[' '] == "SPACE"
# print Token['blah'] == "other string"
# print Token["my age is", 55] == "my age is 55"
#
# # So maybe what I would want is this:
# Token[str src]:
# 	_Token =
# 		str[`\s*`] src: "SPACE"
# 		str src: "other string"
# 		any: None
# 	partial_result = _Token[src] ?? false
# 	if partial_result
# 		return partial_result
# 	else
# 		return "some default"
#
#
