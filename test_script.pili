test = []
test[0]: 'test init success'
print test[0]

greet = "hello world"
test[1] = greet == 'hello world'
print 'test 1 passed' if test[1] == true else 'test 1 FAILED'

greeting[str src]: 'Hello ' + src
test[2] = "Hello Veronica" == greeting['Veronica']
print 'test 2 passed' if test[2] == True else 'test 2 FAILED'

my_var[int num]:
	prop1 = "hello"
	prop2 = "world"
	return num + 5

my_var[str text]: text + '!'
test[3] = my_var[1] == 10
print 'test 3 passed' if test[3] else 'test 3 FAILED'

test[4] = my_var[2] == 11
print 'test 4 passed' if test[4] else 'test 4 FAILED'

next_var =
	str text: text + '?!?!'
test[5] = next_var['hahahahaha'] == 'hahahahaha?!?!'
print 'test 5 passed' if test[5] else 'test 5 FAILED'

my_var[3] = "three"
test[6d] = my_var[3] == 'three'
print 'test 10 passed' if test[6d] else 'test 10 FAILED'

test[7d] = not 345 ~ type["345"] and 345 ~ type[3333]
print 'test 11 passed' if test[7d] else 'test 11 FAILED'

Dog[str name, str breed]:
	.bark: "hello my name is " + name
spot = Dog['Spot', 'terrier']
test[8d] = spot.bark == "hello my name is Spot"
print 'test 12 passed' if test[8d] else 'test 12 FAILED'

test[9d] = (spot.breed == "terrier" or spot.name == "Spot") and (spot.breed != "terrier" or spot.name == "Spot") and not (spot.breed == "terrier" and spot.name != "Spot") and not (spot.breed != "terrier" and spot.name == "Spot")
print 'test 13 passed' if test[9d] else 'test 13 FAILED'

spot.name = 'Rover'
test[14] = spot.name == 'Rover'
print 'test 14 passed' if test[14] else 'test 14 FAILED'

test[15] = spot.bark == "hello my name is Rover"
print 'test 15 passed' if test[15] else 'test 15 FAILED'

Range[int start, int end, int step]:
	index = start
	.next:
		return 'done' if index >= end else (index = index + step)
r = Range[0, 3, 1]
# print r.index
# print r.next
# print r.next
test[20] = r.index == 0 and r.next == 1 and r.next == 2 and r.next == 3 and r.next == 'done'
print 'test 20 passed' if test[20] else 'test 20 FAILED'

# test prototype modification
Dog.bark_breed: "Hi, I'm a " + breed
test[21] = (spot.bark_breed) == "Hi, I'm a terrier"
print 'test 21 passed' if test[21] else 'test 21 FAILED'

test[22] = Dog has "asdfknasdf" == false and Dog has "bark_breed" == true
test[22] = test[22] and not has 'asdfasdf' and has "Dog" == true
test[22] = test[22] and pili has 'string'
print 'test 22 passed' if test[22] else 'test 22 FAILED'

test[23] = (Dog.?[23] ?? "fall back") == "fall back" and (spot.?name ?? "no name") == 'Rover'
print 'test 23 passed' if test[23] else 'test 23 FAILED'

foo[str|int]: 'it worked'
test[24] = foo[4] + foo["4"] == 'it worked' * 2
print 'test 24 ' + ('passed' if test[24] else 'FAILED')

foo2[str|int|bool var_name]: string[var_name] + ' worked'
test[25] = foo2[1] == "1 worked"
print 'test 25 ' + ('passed' if test[25] else 'FAILED')

Cat =
	str name:
		name = "ðŸ˜¸ " + name
	.meow: "hello my name is " + name
	.string: "Cat " + name

my_cat = Cat["Ruby"]
test[30] = string[my_cat] == my_cat.string and my_cat.string == "Cat ðŸ˜¸ Ruby"
print 'test 30 ' + ('passed' if test[30] else 'FAILED')

number = int|float|bool|ratio
add[number a, number b]: integer[a] + b
fav_num = 5
test[31] = add[fav_num, 5]  == fav_num.add[5]
print 'test 31 ' + ('passed' if test[31] else 'FAILED')


test[32] = type[-10 / 20].string == "ratio" \
	and type[4 * (1 + (-15 / 4))].string == "int" \
		and type[1.0 / 1 + 1].string == "float"
print 'test 32 ' + ('passed' if test[32] else 'FAILED')

int_patt = int[-3, 5]
test[33] = 1 ~ int_patt and -11 !~ int_patt and 0.0 !~ int_patt
small_str = str[1, 3]
word_str = str[`\w+`]
test[33] = test[33] and 'hi' ~ small_str and '' !~ small_str and 'too long' !~ small_str
test[33] = test[33] and 'hi' ~ word_str and 'two words' !~ word_str
print 'test 33 ' + ('passed' if test[33] else 'FAILED')

neg_int = int < 0
long_str = str >= 5
test[34] = -1 ~ neg_int and 1 !~ neg_int
test[34] = test[34] and 'hi' !~ long_str # and 'hello there' ~ long_str
print 'test 34 ' + ('passed' if test[34] else 'FAILED')

test[35] = 0
if 1 == 2
	test[35] = 1
else if 1 == 1
	test[35] = test[35] + 10
else
	test[35] = test[35] + 100

print 'test 35 ' + ('passed' if test[35] == 10 else 'FAILED')


my_list = []
my_list[1] = 'one'
my_list[2] = 'two'
my_list['not a number'] = 7d
my_list[3] = 'three'
test[40] = len[my_list] == 3
my_list.push['another value']
test[40] = test[40] and len[my_list] == 4 # and my_list[-1] == 'another value'
print 'test 40 ' + ('passed' if test[40] else 'FAILED')

test[41] = my_list.push[55].len == 5 and my_list[1] == 'one' and my_list[-5] == 'one'
print 'test 41 ' + ('passed' if test[41] else 'FAILED')

my_func = {}
my_func = {any arg: string[arg], num arg: string[arg+1]}
test[42] = my_func["ANY ARG"] == "ANY ARG" and my_func[42] == "43"
print 'test 42 ' + ('passed' if test[42] else 'FAILED')

count = 0
test[43] = true
for item in my_list
	count = count + 1
	test[43] = test[43] and item == my_list[count]

print 'test 43 ' + ('passed' if test[43] else 'FAILED')

i = 1
while i < 130
	if pili has 'verbose'
		print i
	i = i + 1
print 'test 44 ' + ('passed' if (test[44] = i == 130) else 'FAILED')

lt[num a, num b]: a < b

item1 =
	length = 230

item2 =
	length = 143
	.['<'][any item]: length < item.length
	.['>'][any item]: length > item.length

# return .['<']
test[45] = item2 < item1 and not item2 > item1
item2.length = 55555
test[45] = test[45] and not item2 < item1 and item2 > item1
print 'test 45 ' + ('passed' if test[45] else 'FAILED')

Dog[str name, num length]:
	.bark: "hello my name is " + name
	.['<'][Dog other_dog]: length < other_dog.length
	.['>'][Dog other_dog]: length > other_dog.length

Fufu = Dog['Fufu', 30]
Boulder = Dog['Boulder', 140]

test[50] = Fufu <= Boulder and Boulder > Fufu
print 'test 50 ' + ('passed' if test[50] else 'FAILED')

pili['=='][Dog dog1, Dog dog2]:
	return dog1.name == dog2.name

Fufu2 = Dog['no name', 31]
Fufu2.name = 'Fufu'
test[51] = Fufu != Boulder and Fufu == Fufu2
print 'test 51 ' + ('passed' if test[51] else 'FAILED')

test[52] = 'three' in my_list and not 3 in my_list and 'Fufu' in Fufu and not 'Boulder' in Fufu
print 'test 52 ' + ('passed' if test[52] else 'FAILED')


join_strings[str items+, num n?]:
	if has 'n'
		items.push[n.string]
	return items.join[' :: ']

test[53] = join_strings["hi"] == 'hi' and join_strings["hi", "there"] == "hi :: there" and join_strings["hi", "there", "someone"] == "hi :: there :: someone" and join_strings["hi", 1] == "hi :: 1" and join_strings["hi", "there", 3.5d] == "hi :: there :: 3.3"

print_test[num n]:
	print 'test ' + n.string + (' passed' if test[n] else ' FAILED')

print_test[53]


ifs[int i*, float f?, str s+]:
	result = ''
	if has 'i' and len[i]
		result = string[i]
	if has 'f'
		result = result + ' ' * bool[result] + string[f]
	return result + ' ' * bool[result] + '"' + s.join[' '] + '"'

test[54] = ifs['oh'] == '"oh"' and ifs[1, 'oh'] == '[1] "oh"' and ifs[0.555, 'oh'] == '0.555 "oh"' and ifs[2, 0.0003, 'oh'] == '[2] 0.0003 "oh"' and ifs[2, 1, 11, 0.4, 'oh', 'my'] == '[2, 1, 11] 0.4 "oh my"'
print_test[54]


asdf = 1
asdf += 2
asdf -= 2 + 2
asdf *= 20
asdf /= -10
asdf += true
asdf //= 2
test[55] = asdf == 1
print_test[55]


joiner =
	list ls, str sep:
		result = ''
		for s in ls
			result = result + s.string + sep
		return result
	list ls:
		return joiner[ls, ' ']

# print my_list.joiner

# fsf[float f1*, str s*, float f2*]:
# 	result = ''
# 	if has 'f1'
# 		result = "f1: " + f1.joiner + ','
# 	if has 's'
# 		result = result + ', ' + "s: " + s.join[' '] + ', '
# 	if has 'f2'
# 		result = result +'f2: '+ f2.joiner
# 	return result
#
# print fsf[-1.3, 's', -0.122]
# print fsf['s', -0.122]
# print fsf[0.2345]
# print fsf['STRING']
# print fsf['STRING and ', 0.1, 0.2]
# print fsf[]
# print '*********************'

fsnfi[float f1?, str s*, num n*, float f2+, int op_i?]:
	args = []
	if has 'f1'
		args.push['f1='+f1.string]
	args.push['s='+s.string]
	args.push['n='+n.string]
	args.push['f2='+f2.string]
	if has 'op_i'
		args.push['op_i='+op_i.string]
	return args.joiner

test[100] = fsnfi[0.11, 'string', 1/2, -3.2] == 'f1=0.11 s=[string] n=[1/2] f2=[-3.2] '
test[100] = test[100] and fsnfi[1.434, 5] == 's=[] n=[] f2=[1.434] op_i=5 '
print_test[100]


ls = [1,2,3]
test[101] = ls.join[' :: '] == '1 :: 2 :: 3'
print_test[101]


intize = python['int']
test[102] = intize['36'] == 100 and intize[10.1] == 10
print_test[102]


var_name ??= 5
var_name ??= -10
test[103] = var_name == 5
var_name = none
var_name ??= 'done'
test[103] = test[103] and var_name == 'done'
print_test[103]


names = ['Chairman Meow', 'Purrfect', 'Fuzz Aldrin']
cats = names..Cat
test[104] = cats..name == ['ðŸ˜¸ Chairman Meow', 'ðŸ˜¸ Purrfect', 'ðŸ˜¸ Fuzz Aldrin']
test[104] = test[104] and cats..string.join['\n'] == 'Cat ðŸ˜¸ Chairman Meow\nCat ðŸ˜¸ Purrfect\nCat ðŸ˜¸ Fuzz Aldrin'
print_test[104]



fnls = [Cat, Cat, Cat]
cats = fnls..["ralph"]
print cats..meow
print len[test]
all_test_passed = true
count = 0
for i in test
	count += 1
	for j in [1,2,3,4,5]
		1
		# print i.string +', ' + j.string
		if count > 1 and j == 4
			break 2
			print "count = " + count.string + "j = " + j.string
	if count >= 14
		break
	count += 5 * (count > 1)
	# print "count = " + count.string

test[105] = j == 4 and count == 2
print_test[105]


count = j = 0
for i in test
	if (count += 1) > 13
		break
	if count < 5
		continue
	for j in [1,2,3,4,5]
		if j > 4.5
			continue
		# print 'j='+j.string
		if j > 2.5
			continue 2
	if j > 2.5 and count >= 5
		print "WILL NOT PRINT THIS LINE"
	# print 'count='+count.string
	if count >= 10
		break
# print 'COUNT='+count.string
# print 'J='+j.string
test[110] = count == 14 and j == 3
print_test[110]

print 2 ** 3 ** 4
print 2 ** (3 ** 4)
print (2 ** 3) ** 4

print 2/3/4
print 2/(3/4)
print (2/3)/4


for t in test
	if not t
		all_test_passed = false
		break
if all_test_passed
	print "All " + string[test.len] + " tests passed!"
else
	print "some tests failed :("



exit
# ***********************






# container =
# 	data = {}
# 	name = "I'm a container"
# 	.len: len[data]
# len[container]  # or container.len
# > 0
#
# Duration[int hr, int min]:
# 	is_afternoon: hr >= 12
# 	is_morning: hr < 12
# 	.["+"][other]:
# 		new_hr = hr + other.hr
# 		new_min = min + other.min
# 		if new_min >= 60
# 			new_min -= 60
# 			new_hr += 1
# 		return Duration[new_hr % 24, new_min]
# dur = Duration[1, 59] + Duration[0, 15]
# print str[dur.hr] + ":" str[dur.min]
# # > "2:14"
#
#
#
#
#
#
#
#
#
# coolFunc[str input: "345", int n: 43]:
#     0: "zero"
#     "string_key": 5
#     string_key: 5   // equivalent to above
#     int: 3 + 3      // key is not string "int", rather the type `int`
#     int<0: "negative integers"
#     return input + str[n]
#
# myFunction[0]: "zero"
# myFunction["string_key"]: 5
# myFunction["string_key"]: 5
# myFunction[int]: 3 + 3
# myFunction[int<0]: "negative integers"
#
# coolFunc["input"]
#
# Token =
# 	str[`\s*`]: "SPACE"
# 	str src: "other string"
# 	str src, int n: src + " " + str[n]
#
# print Token[' '] == "SPACE"
# print Token['blah'] == "other string"
# print Token["my age is", 55] == "my age is 55"
#
# # So maybe what I would want is this:
# Token[str src]:
# 	_Token =
# 		str[`\s*`] src: "SPACE"
# 		str src: "other string"
# 		any: None
# 	partial_result = _Token[src] ?? false
# 	if partial_result
# 		return partial_result
# 	else
# 		return "some default"
#
#

#
# 3.300000000000
# False
# *********************
# [] oh
# [1] oh
# []0.555000000000 oh
# [2]0.000030000000 oh
# [2, 1, 11]0.000030000000 oh
# *********************
# f1: -1.300000000000 ,, s: s, f2: -0.122
# f1: ,, s: s, f2: -0.122
# f1: 0.2345 ,, s: , f2:
# f1: ,, s: STRING, f2:
# f1: ,, s: STRING and , f2: 0.100000000000 0.200000000000
